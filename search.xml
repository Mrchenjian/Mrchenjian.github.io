<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>新客站</title>
    <url>/2020/03/18/%E6%96%B0%E5%AE%A2%E7%AB%99/</url>
    <content><![CDATA[<blockquote class="blockquote-center"><h1 id="第一篇文章"><a href="#第一篇文章" class="headerlink" title="第一篇文章"></a>第一篇文章</h1></blockquote>

<h2 id="2-01-五年的我i七年前"><a href="#2-01-五年的我i七年前" class="headerlink" title="2.01  五年的我i七年前"></a>2.01  五年的我i七年前</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  function Father (uname,age) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#x2F;&#x2F; this指向父类的实例对象</span></pre></td></tr><tr><td class="code"><pre><span class="line">	this.uname &#x3D; uname;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	this.age &#x3D; age;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#x2F;&#x2F; 只要把父类的this指向子类的this既可</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">function Son (uname, age,score) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#x2F;&#x2F; this指向子类构造函数</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#x2F;&#x2F; this.uname &#x3D; uname;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#x2F;&#x2F; this.age &#x3D; age;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#x2F;&#x2F; Father(uname,age);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	Father.call(this,uname,age);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	this.score &#x3D; score;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">Son.prototype.sing &#x3D; function () &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	console.log(this.uname + &#39;唱歌&#39;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">var obj &#x3D; new Son(&#39;刘德华&#39;,22,99);</span></pre></td></tr><tr><td class="code"><pre><span class="line">console.log(obj.uname);</span></pre></td></tr><tr><td class="code"><pre><span class="line">console.log(obj.score);</span></pre></td></tr><tr><td class="code"><pre><span class="line">obj.sing();</span></pre></td></tr></table></figure>
<p><a href='wwww.baidu.com'>百度</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>新客站 tag</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript内存回收机制</title>
    <url>/2019/03/09/JavaScript%E7%9A%84%E5%86%85%E5%AD%98%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h2 id="js垃圾回收"><a href="#js垃圾回收" class="headerlink" title="js垃圾回收"></a>js垃圾回收</h2><p>JavaScript有自动垃圾回收机制，也就是说执行环境会负责管理代码执行过程中使用的内存，在开发过程中就无需考虑内存分配及无用内存的回收问题了</p>
<h2 id="变量生命周期"><a href="#变量生命周期" class="headerlink" title="变量生命周期"></a>变量生命周期</h2><p>变量分为： 局部变量和全局变量<br>局部变量：函数执行完释放  全局变量等程序执行完释放</p>
<h2 id="标记方式"><a href="#标记方式" class="headerlink" title="标记方式"></a>标记方式</h2><p> <strong>标记清除</strong></p>
<p> 这是javascript中最常用的垃圾回收方式。当变量进入执行环境是，就标记这个变量为“进入环境”。从逻辑上讲，永远不能释放进入环境的变量所占用的内存，因为只要执行流进入相应的环境，就可能会用到他们。当变量离开环境时，则将其标记为“离开环境”。<br>垃圾收集器在运行的时候会给存储在内存中的所有变量都加上标记。然后，它会去掉环境中的变量以及被环境中的变量引用的标记。而在此之后再被加上标记的变量将被视为准备删除的变量，原因是环境中的变量已经无法访问到这些变量了。最后。垃圾收集器完成内存清除工作，销毁那些带标记的值，并回收他们所占用的内存空间</p>
<p>1、在js中，全局变量和window对象会一直存在，不会被回收<br>2、递归所用到的所有方法和变量，不会被回收<br>3、闭包里用到的变量，不会被回收<br>4、所有被标记的，都被认为是垃圾，会启动其回收机制，释放内存<br>5、栈内存释放  函数执行完 ，形成的执行上下文中  没有东西被上下文以外的东西占用  此上下文就会执行环境栈中移除（释放）如果有被占用，则压缩到栈的底部 （没有释放  =》闭包）</p>
<p><strong>引用计数</strong></p>
<p>　另一种不太常见的垃圾回收策略是引用计数。引用计数的含义是跟踪记录每个值被引用的次数。当声明了一个变量并将一个引用类型赋值给该变量时，则这个值的引用次数就是1。相反，如果包含对这个值引用的变量又取得了另外一个值，则这个值的引用次数就减1。当这个引用次数变成0时，则说明没有办法再访问这个值了，因而就可以将其所占的内存空间给收回来。这样，垃圾收集器下次再运行时，它就会释放那些引用次数为0的值所占的内存</p>
<p>但是用这种方法存在着一个问题，下面来看看代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">problem</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> objA = <span class="keyword">new</span> <span class="built_in">Object</span>();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> objB = <span class="keyword">new</span> <span class="built_in">Object</span>();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    objA.someOtherObject = objB;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    objB.anotherObject = objA;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p>在这个例子中，objA和objB通过各自的属性相互引用；也就是说这两个对象的引用次数都是2。在采用引用计数的策略中，由于函数执行之后，这两个对象都离开了作用域，函数执行完成之后，objA和objB还将会继续存在，因为他们的引用次数永远不会是0。这样的相互引用如果说很大量的存在就会导致大量的内存泄露。</p>
<p>　　我们知道，IE中有一部分对象并不是原生JavaScript对象。例如，其BOM和DOM中的对象就是使用C++以COM（Component Object<br>Model，组件对象）对象的形式实现的，而COM对象的垃圾回收器就是采用的引用计数的策略。因此，即使IE的Javascript引擎使用标记清除的策略来实现的，但JavaScript访问的COM对象依然是基于引用计数的策略的。说白了，只要IE中涉及COM对象，就会存在循环引用的问题。看看下面的这个简单的例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> element = <span class="built_in">document</span>.getElementById(<span class="string">"some_element"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myObj =<span class="keyword">new</span> <span class="built_in">Object</span>();</span></pre></td></tr><tr><td class="code"><pre><span class="line">myObj.element = element;</span></pre></td></tr><tr><td class="code"><pre><span class="line">element.someObject = myObj;</span></pre></td></tr></table></figure>
<p>上面这个例子中，在一个DOM元素(element)与一个原生JavaScript对象(myObj)之间建立了循环引用。其中，变量myObj有一个名为element的属性指向element；而变量element有一个名为someObject的属性回指到myObj。由于循环引用，即使将例子中的DOM从页面中移除，内存也永远不会回收。</p>
<p>　　不过上面的问题也不是不能解决，我们可以手动切断他们的循环引用。</p>
<p>myObj.element = null;<br>element.someObject =null;<br>　　这样写代码的话就可以解决循环引用的问题了，也就防止了内存泄露的问题。</p>
<h2 id="减少JavaScript中的垃圾回收"><a href="#减少JavaScript中的垃圾回收" class="headerlink" title="减少JavaScript中的垃圾回收"></a>减少JavaScript中的垃圾回收</h2><p>　　首先，最明显的，new关键字就意味着一次内存分配，例如 new Foo()。最好的处理方法是：在初始化的时候新建对象，然后在后续过程中尽量多的重用这些创建好的对象。</p>
<p>另外还有以下三种内存分配表达式（可能不像new关键字那么明显了）：</p>
<p>{} （创建一个新对象）<br>[] （创建一个新数组）<br>function() {…} (创建一个新的方法，注意：新建方法也会导致垃圾收集！！)<br>1、对象object优化<br>　　为了最大限度的实现对象的重用，应该像避使用new语句一样避免使用{}来新建对象。</p>
<p>　　{“foo”:”bar”}这种方式新建的带属性的对象，常常作为方法的返回值来使用，可是这将会导致过多的内存创建，因此最好的解决办法是：每一次函数调用完成之后，将需要返回的数据放入一个全局的对象中，并返回此全局对象。如果使用这种方式，就意味着每一次方法调用都会导致全局对象内容的修改，这有可能会导致错误的发生。因此，一定要对此全局对象的使用进行详细的注释和说明。</p>
<p>　　有一种方式能够保证对象（确保对象prototype上没有属性）的重复利用，那就是遍历此对象的所有属性，并逐个删除，最终将对象清理为一个空对象。</p>
<p>　　cr.wipe(obj)方法就是为此功能而生，代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除obj对象的所有属性，高效的将obj转化为一个崭新的对象！</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">cr.wipe = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> p <span class="keyword">in</span> obj) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         <span class="keyword">if</span> (obj.hasOwnProperty(p))</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">delete</span> obj[p];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr></table></figure>
<p>有些时候，你可以使用cr.wipe(obj)方法清理对象，再为obj添加新的属性，就可以达到重复利用对象的目的。虽然通过清空一个对象来获取“新对象”的做法，比简单的通过{}来创建对象要耗时一些，但是在实时性要求很高的代码中，这一点短暂的时间消耗，将会有效的减少垃圾堆积，并且最终避免垃圾回收暂停，这是非常值得的！<br>2、数组array优化<br>　　将[]赋值给一个数组对象，是清空数组的捷径（例如： arr = [];），但是需要注意的是，这种方式又创建了一个新的空对象，并且将原来的数组对象变成了一小片内存垃圾！实际上，将数组长度赋值为0（arr.length = 0）也能达到清空数组的目的，并且同时能实现数组重用，减少内存垃圾的产生。</p>
<p>3、方法function优化<br>　　方法一般都是在初始化的时候创建，并且此后很少在运行时进行动态内存分配，这就使得导致内存垃圾产生的方法，找起来就不是那么容易了。但是从另一角度来说，这更便于我们寻找了，因为只要是动态创建方法的地方，就有可能产生内存垃圾。例如：将方法作为返回值，就是一个动态创建方法的实例。</p>
<p>　　在游戏的主循环中，setTimeout或requestAnimationFrame来调用一个成员方法是很常见的，例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">setTimeout(</span></pre></td></tr><tr><td class="code"><pre><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">self</span>) </span>&#123;                    </span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">              self.tick();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)(<span class="keyword">this</span>), <span class="number">16</span>)</span></pre></td></tr></table></figure>
<p>　每过16毫秒调用一次this.tick()，嗯，乍一看似乎没什么问题，但是仔细一琢磨，每一次调用都返回了一个新的方法对象，这就导致了大量的方法对象垃圾！</p>
<p>　　为了解决这个问题，可以将作为返回值的方法保存起来，例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// at startup</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.tickFunc = (</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">self</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                self.tick();</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">)(<span class="keyword">this</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// in the tick() function</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">setTimeout(<span class="keyword">this</span>.tickFunc, <span class="number">16</span>);</span></pre></td></tr></table></figure>

<p>相比于每次都新建一个方法对象，这种方式在每一帧当中重用了相同的方法对象。这种方式的优势是显而易见的，而这种思想也可以应用在任何以方法为返回值或者在运行时创建方法的情况当中。</p>
<p>4、高级技术<br>　　从根本上来说，javascript本身就是围绕着垃圾收集来设计的。随着我们工作的进行，避免内存垃圾变得越来越困难。因为很多方便实用的Javascript库方法也会产生一些新的对象。对于这些库方法产生的垃圾，我们束手无策，只能重新翻看文档，并且检查方法的返回值。例如，数组的slice方法返回一个新的数组（在不修改原数组的基础上，截取出一部分作为新数组），字符串的substr方法返回一个新的字符串（在不修改原字符串的基础上，截取出一部分字符串作为返回值）等等。</p>
<p>　　调用这些库方法，将会创建内存垃圾，而你能做的，只有避免调用这些方法，或者用不创建系统垃圾的方式重写这些方法（有点极端啦~）。</p>
<p>　　例如，在Construct2引擎中，从数组中利用下标来删除一个元素，是经常进行的操作。最初我们是用下面这种方式来实现的：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sliced = arr.slice(index + <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">arr.length = index;</span></pre></td></tr><tr><td class="code"><pre><span class="line">arr.push.apply(arr, sliced);</span></pre></td></tr></table></figure>
<p>　然而，slice方法会返回一个新的数组对象（数组中的元素是原数组中删掉的部分），并且会通过arr.push.apply方法将元素重新复制回原数组，但是在此操作之后，该数组就成为了一片内存垃圾。由于这是我们引擎中的垃圾产生的热点代码（使用频率非常很高），因此我们利用了迭代的方式重写了上述代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = index, len = arr.length – <span class="number">1</span>; i &lt; len; i++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    arr[i] = arr[i + <span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">arr.length = len;</span></pre></td></tr></table></figure>
<p>显然，重写大量的库函数是非常痛苦的，因此你必须仔细权衡方法的易用性和内存垃圾产生情况。如果产生大量内存垃圾的方法在动画的每一帧中被多次调用，你可能就会兴高采烈的重写库函数啦。</p>
<p>　　在递归函数中，通过{}构造空对象，并在递归过程中传递数据，虽然是很方便的。但是更好的方式是：利用一个单独的数组对象作为堆栈，在递归过程中对数组进行push和pop操作。更进一步，不要调用array的pop方法（pop将会使得array的最后一个元素将会变成内存垃圾），而应该使用一个索引来记录数组的最后一个元素的位置，在pop时简单的将索引减一即可；类似的，将索引加1来代替array的push操作，只有当索引对应的元素不存在时，才执行真正的push为数组加入一个新元素。</p>
<p>　　另外，在任何时候，都应该避免使用向量对象（例如：包含x和y属性的vector2对象）。有些方法将向量对象作为方法返回值，既可以支持返回值的再次修改，又能够将需要的属性一次性返回，使用起来非常方便。但是有时候在一帧动画中，创建了成百上千个这样的向量对象，从而导致严重的垃圾回收性能问题，也是非常常见的。因此最好将这些方法分离成具有独立职责的功能个体，例如：利用getX()和getY()方法（返回具体数据）代替getPosition()方法（返回一个vector2对象）。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>　　在Javascript中，彻底避免垃圾回收是非常困难的。垃圾回收机制与实时软件（例如：游戏）的实时性要求，从根本上就是对立的。</p>
<p>　　但是，为了减少内存垃圾，我们还是可以对javascript代码进行彻底检查，有些代码中存在明显的产生过多内存垃圾的问题代码，这些正是我们需要检查并且完善的。</p>
<p>　　我认为，只要我们投入更多的精力和关注，实现实时的、低垃圾收集的javascript应用还是很有可能的。毕竟，对于可交互性要求较高的游戏或应用来说，实时性和低垃圾收集，两者都是至关重要。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>js回收机制</tag>
      </tags>
  </entry>
</search>
